/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
import { now } from '../utils/now.js';
export default function createServerRenderPlugin(app) {
  return function serverRenderPlugin({
    render,
    timing,
    ssrDecider
  }) {
    return async function renderer(ctx, next) {
      app._setRef();

      app.renderSetupCtx = ctx; // Element wrappers should be added in *reverse* topological order so that
      // the resulting element tree is in topological order during renders.
      // For example, if plugin B depends on plugin A, the tree should be:
      // <AProvider>
      //   <BProvider>{root}</BProvider>
      // </APRovider>
      // In this case, B provider can depend on the context of A provider.

      for (var i = app.renderSetup.length - 1; i >= 0; i--) {
        const wrapper = app.renderSetup[i];
        const result = wrapper(ctx.element);

        if (result !== void 0) {
          ctx.element = result;
        }
      }

      app.renderSetupCtx = void 0;

      app._clearRef();

      const timer = timing.from(ctx);
      timer.downstream.resolve(now() - timer.start);
      let renderTime = null;

      if (ctx.element && !ctx.body && ctx.respond !== false) {
        app._setRef();

        app.renderCtx = ctx;
        const renderStart = now();
        ctx.rendered = await render(ctx.element, ctx);
        renderTime = now() - renderStart;
        app.renderCtx = void 0;

        app._clearRef();
      } // For non-streaming, run post prepare effects here
      // For streaming they are run on prepare boundary drop


      if (ssrDecider(ctx) === true) {
        app._setRef();

        app.postPrepareEffectCtx = ctx;

        for (const effect of ctx.postPrepareEffects) {
          effect();
        }

        app.postPrepareEffectCtx = void 0;

        app._clearRef();
      }

      timer.upstreamStart = now();
      await next();

      if (ctx.element && typeof renderTime === 'number') {
        timer.render.resolve(renderTime);
      }
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL3NlcnZlci1yZW5kZXJlci5qcyJdLCJuYW1lcyI6WyJub3ciLCJjcmVhdGVTZXJ2ZXJSZW5kZXJQbHVnaW4iLCJhcHAiLCJzZXJ2ZXJSZW5kZXJQbHVnaW4iLCJyZW5kZXIiLCJ0aW1pbmciLCJzc3JEZWNpZGVyIiwicmVuZGVyZXIiLCJjdHgiLCJuZXh0IiwiX3NldFJlZiIsInJlbmRlclNldHVwQ3R4IiwiaSIsInJlbmRlclNldHVwIiwibGVuZ3RoIiwid3JhcHBlciIsInJlc3VsdCIsImVsZW1lbnQiLCJfY2xlYXJSZWYiLCJ0aW1lciIsImZyb20iLCJkb3duc3RyZWFtIiwicmVzb2x2ZSIsInN0YXJ0IiwicmVuZGVyVGltZSIsImJvZHkiLCJyZXNwb25kIiwicmVuZGVyQ3R4IiwicmVuZGVyU3RhcnQiLCJyZW5kZXJlZCIsInBvc3RQcmVwYXJlRWZmZWN0Q3R4IiwiZWZmZWN0IiwicG9zdFByZXBhcmVFZmZlY3RzIiwidXBzdHJlYW1TdGFydCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxTQUFRQSxHQUFSLFFBQWtCLGlCQUFsQjtBQUVBLGVBQWUsU0FBU0Msd0JBQVQsQ0FBa0NDLEdBQWxDLEVBQXVDO0FBQ3BELFNBQU8sU0FBU0Msa0JBQVQsQ0FBNEI7QUFBQ0MsSUFBQUEsTUFBRDtBQUFTQyxJQUFBQSxNQUFUO0FBQWlCQyxJQUFBQTtBQUFqQixHQUE1QixFQUEwRDtBQUMvRCxXQUFPLGVBQWVDLFFBQWYsQ0FBd0JDLEdBQXhCLEVBQTZCQyxJQUE3QixFQUFtQztBQUN4Q1AsTUFBQUEsR0FBRyxDQUFDUSxPQUFKOztBQUNBUixNQUFBQSxHQUFHLENBQUNTLGNBQUosR0FBcUJILEdBQXJCLENBRndDLENBR3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFdBQUssSUFBSUksQ0FBQyxHQUFHVixHQUFHLENBQUNXLFdBQUosQ0FBZ0JDLE1BQWhCLEdBQXlCLENBQXRDLEVBQXlDRixDQUFDLElBQUksQ0FBOUMsRUFBaURBLENBQUMsRUFBbEQsRUFBc0Q7QUFDcEQsY0FBTUcsT0FBTyxHQUFHYixHQUFHLENBQUNXLFdBQUosQ0FBZ0JELENBQWhCLENBQWhCO0FBQ0EsY0FBTUksTUFBTSxHQUFHRCxPQUFPLENBQUNQLEdBQUcsQ0FBQ1MsT0FBTCxDQUF0Qjs7QUFDQSxZQUFJRCxNQUFNLEtBQUssS0FBSyxDQUFwQixFQUF1QjtBQUNyQlIsVUFBQUEsR0FBRyxDQUFDUyxPQUFKLEdBQWNELE1BQWQ7QUFDRDtBQUNGOztBQUNEZCxNQUFBQSxHQUFHLENBQUNTLGNBQUosR0FBcUIsS0FBSyxDQUExQjs7QUFDQVQsTUFBQUEsR0FBRyxDQUFDZ0IsU0FBSjs7QUFFQSxZQUFNQyxLQUFLLEdBQUdkLE1BQU0sQ0FBQ2UsSUFBUCxDQUFZWixHQUFaLENBQWQ7QUFDQVcsTUFBQUEsS0FBSyxDQUFDRSxVQUFOLENBQWlCQyxPQUFqQixDQUF5QnRCLEdBQUcsS0FBS21CLEtBQUssQ0FBQ0ksS0FBdkM7QUFFQSxVQUFJQyxVQUFVLEdBQUcsSUFBakI7O0FBQ0EsVUFBSWhCLEdBQUcsQ0FBQ1MsT0FBSixJQUFlLENBQUNULEdBQUcsQ0FBQ2lCLElBQXBCLElBQTRCakIsR0FBRyxDQUFDa0IsT0FBSixLQUFnQixLQUFoRCxFQUF1RDtBQUNyRHhCLFFBQUFBLEdBQUcsQ0FBQ1EsT0FBSjs7QUFDQVIsUUFBQUEsR0FBRyxDQUFDeUIsU0FBSixHQUFnQm5CLEdBQWhCO0FBQ0EsY0FBTW9CLFdBQVcsR0FBRzVCLEdBQUcsRUFBdkI7QUFDQVEsUUFBQUEsR0FBRyxDQUFDcUIsUUFBSixHQUFlLE1BQU16QixNQUFNLENBQUNJLEdBQUcsQ0FBQ1MsT0FBTCxFQUFjVCxHQUFkLENBQTNCO0FBQ0FnQixRQUFBQSxVQUFVLEdBQUd4QixHQUFHLEtBQUs0QixXQUFyQjtBQUNBMUIsUUFBQUEsR0FBRyxDQUFDeUIsU0FBSixHQUFnQixLQUFLLENBQXJCOztBQUNBekIsUUFBQUEsR0FBRyxDQUFDZ0IsU0FBSjtBQUNELE9BaEN1QyxDQWtDeEM7QUFDQTs7O0FBQ0EsVUFBSVosVUFBVSxDQUFDRSxHQUFELENBQVYsS0FBb0IsSUFBeEIsRUFBOEI7QUFDNUJOLFFBQUFBLEdBQUcsQ0FBQ1EsT0FBSjs7QUFDQVIsUUFBQUEsR0FBRyxDQUFDNEIsb0JBQUosR0FBMkJ0QixHQUEzQjs7QUFDQSxhQUFLLE1BQU11QixNQUFYLElBQXFCdkIsR0FBRyxDQUFDd0Isa0JBQXpCLEVBQTZDO0FBQzNDRCxVQUFBQSxNQUFNO0FBQ1A7O0FBQ0Q3QixRQUFBQSxHQUFHLENBQUM0QixvQkFBSixHQUEyQixLQUFLLENBQWhDOztBQUNBNUIsUUFBQUEsR0FBRyxDQUFDZ0IsU0FBSjtBQUNEOztBQUVEQyxNQUFBQSxLQUFLLENBQUNjLGFBQU4sR0FBc0JqQyxHQUFHLEVBQXpCO0FBQ0EsWUFBTVMsSUFBSSxFQUFWOztBQUVBLFVBQUlELEdBQUcsQ0FBQ1MsT0FBSixJQUFlLE9BQU9PLFVBQVAsS0FBc0IsUUFBekMsRUFBbUQ7QUFDakRMLFFBQUFBLEtBQUssQ0FBQ2YsTUFBTixDQUFha0IsT0FBYixDQUFxQkUsVUFBckI7QUFDRDtBQUNGLEtBcEREO0FBcURELEdBdEREO0FBdUREIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBub2Zsb3dcbiAqL1xuXG5pbXBvcnQge25vd30gZnJvbSAnLi4vdXRpbHMvbm93LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU2VydmVyUmVuZGVyUGx1Z2luKGFwcCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VydmVyUmVuZGVyUGx1Z2luKHtyZW5kZXIsIHRpbWluZywgc3NyRGVjaWRlcn0pIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gcmVuZGVyZXIoY3R4LCBuZXh0KSB7XG4gICAgICBhcHAuX3NldFJlZigpO1xuICAgICAgYXBwLnJlbmRlclNldHVwQ3R4ID0gY3R4O1xuICAgICAgLy8gRWxlbWVudCB3cmFwcGVycyBzaG91bGQgYmUgYWRkZWQgaW4gKnJldmVyc2UqIHRvcG9sb2dpY2FsIG9yZGVyIHNvIHRoYXRcbiAgICAgIC8vIHRoZSByZXN1bHRpbmcgZWxlbWVudCB0cmVlIGlzIGluIHRvcG9sb2dpY2FsIG9yZGVyIGR1cmluZyByZW5kZXJzLlxuICAgICAgLy8gRm9yIGV4YW1wbGUsIGlmIHBsdWdpbiBCIGRlcGVuZHMgb24gcGx1Z2luIEEsIHRoZSB0cmVlIHNob3VsZCBiZTpcbiAgICAgIC8vIDxBUHJvdmlkZXI+XG4gICAgICAvLyAgIDxCUHJvdmlkZXI+e3Jvb3R9PC9CUHJvdmlkZXI+XG4gICAgICAvLyA8L0FQUm92aWRlcj5cbiAgICAgIC8vIEluIHRoaXMgY2FzZSwgQiBwcm92aWRlciBjYW4gZGVwZW5kIG9uIHRoZSBjb250ZXh0IG9mIEEgcHJvdmlkZXIuXG4gICAgICBmb3IgKHZhciBpID0gYXBwLnJlbmRlclNldHVwLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBhcHAucmVuZGVyU2V0dXBbaV07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHdyYXBwZXIoY3R4LmVsZW1lbnQpO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSB2b2lkIDApIHtcbiAgICAgICAgICBjdHguZWxlbWVudCA9IHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYXBwLnJlbmRlclNldHVwQ3R4ID0gdm9pZCAwO1xuICAgICAgYXBwLl9jbGVhclJlZigpO1xuXG4gICAgICBjb25zdCB0aW1lciA9IHRpbWluZy5mcm9tKGN0eCk7XG4gICAgICB0aW1lci5kb3duc3RyZWFtLnJlc29sdmUobm93KCkgLSB0aW1lci5zdGFydCk7XG5cbiAgICAgIGxldCByZW5kZXJUaW1lID0gbnVsbDtcbiAgICAgIGlmIChjdHguZWxlbWVudCAmJiAhY3R4LmJvZHkgJiYgY3R4LnJlc3BvbmQgIT09IGZhbHNlKSB7XG4gICAgICAgIGFwcC5fc2V0UmVmKCk7XG4gICAgICAgIGFwcC5yZW5kZXJDdHggPSBjdHg7XG4gICAgICAgIGNvbnN0IHJlbmRlclN0YXJ0ID0gbm93KCk7XG4gICAgICAgIGN0eC5yZW5kZXJlZCA9IGF3YWl0IHJlbmRlcihjdHguZWxlbWVudCwgY3R4KTtcbiAgICAgICAgcmVuZGVyVGltZSA9IG5vdygpIC0gcmVuZGVyU3RhcnQ7XG4gICAgICAgIGFwcC5yZW5kZXJDdHggPSB2b2lkIDA7XG4gICAgICAgIGFwcC5fY2xlYXJSZWYoKTtcbiAgICAgIH1cblxuICAgICAgLy8gRm9yIG5vbi1zdHJlYW1pbmcsIHJ1biBwb3N0IHByZXBhcmUgZWZmZWN0cyBoZXJlXG4gICAgICAvLyBGb3Igc3RyZWFtaW5nIHRoZXkgYXJlIHJ1biBvbiBwcmVwYXJlIGJvdW5kYXJ5IGRyb3BcbiAgICAgIGlmIChzc3JEZWNpZGVyKGN0eCkgPT09IHRydWUpIHtcbiAgICAgICAgYXBwLl9zZXRSZWYoKTtcbiAgICAgICAgYXBwLnBvc3RQcmVwYXJlRWZmZWN0Q3R4ID0gY3R4O1xuICAgICAgICBmb3IgKGNvbnN0IGVmZmVjdCBvZiBjdHgucG9zdFByZXBhcmVFZmZlY3RzKSB7XG4gICAgICAgICAgZWZmZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgYXBwLnBvc3RQcmVwYXJlRWZmZWN0Q3R4ID0gdm9pZCAwO1xuICAgICAgICBhcHAuX2NsZWFyUmVmKCk7XG4gICAgICB9XG5cbiAgICAgIHRpbWVyLnVwc3RyZWFtU3RhcnQgPSBub3coKTtcbiAgICAgIGF3YWl0IG5leHQoKTtcblxuICAgICAgaWYgKGN0eC5lbGVtZW50ICYmIHR5cGVvZiByZW5kZXJUaW1lID09PSAnbnVtYmVyJykge1xuICAgICAgICB0aW1lci5yZW5kZXIucmVzb2x2ZShyZW5kZXJUaW1lKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuIl19