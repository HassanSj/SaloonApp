/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */
import { compose } from './compose.js';
import Timing, { TimingToken } from './plugins/timing';
import BaseApp from './base-app';
import serverRenderer from './plugins/server-renderer';
import { RenderToken, ElementToken, SSRDeciderToken, SSRBodyTemplateToken, SSRShellTemplateToken } from './tokens';
import ssrPlugin from './plugins/ssr';
import contextMiddleware from './plugins/server-context.js';
import { appSymbol } from './utils/app-symbol.js';
export default function () {
  const Koa = require('koa');

  return class ServerApp extends BaseApp {
    constructor(el, render) {
      super(el, render);
      this.endpoints = new Map();
      this._app = new Koa();
      this._app.proxy = true;
      this.middleware(contextMiddleware);
      this.middleware((ctx, next) => {
        ctx[appSymbol] = this;
        return next();
      });
      this.register(TimingToken, Timing);
      this.middleware((ctx, next) => {
        for (const [endpointPath, handler] of this.endpoints) {
          if (ctx.path === endpointPath) {
            return handler(ctx, next);
          }
        }

        return next();
      });
      this.middleware({
        element: ElementToken,
        ssrDecider: SSRDeciderToken,
        ssrBodyTemplate: SSRBodyTemplateToken.optional,
        ssrShellTemplate: SSRShellTemplateToken.optional
      }, ssrPlugin(this.endpoints));
    }

    resolve() {
      this.middleware({
        timing: TimingToken,
        render: RenderToken,
        ssrDecider: SSRDeciderToken
      }, serverRenderer(this));
      return super.resolve();
    }

    callback() {
      this.resolve();

      this._app.use(compose(this.plugins));

      return this._app.callback();
    }

  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zZXJ2ZXItYXBwLmpzIl0sIm5hbWVzIjpbImNvbXBvc2UiLCJUaW1pbmciLCJUaW1pbmdUb2tlbiIsIkJhc2VBcHAiLCJzZXJ2ZXJSZW5kZXJlciIsIlJlbmRlclRva2VuIiwiRWxlbWVudFRva2VuIiwiU1NSRGVjaWRlclRva2VuIiwiU1NSQm9keVRlbXBsYXRlVG9rZW4iLCJTU1JTaGVsbFRlbXBsYXRlVG9rZW4iLCJzc3JQbHVnaW4iLCJjb250ZXh0TWlkZGxld2FyZSIsImFwcFN5bWJvbCIsIktvYSIsInJlcXVpcmUiLCJTZXJ2ZXJBcHAiLCJjb25zdHJ1Y3RvciIsImVsIiwicmVuZGVyIiwiZW5kcG9pbnRzIiwiTWFwIiwiX2FwcCIsInByb3h5IiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJyZWdpc3RlciIsImVuZHBvaW50UGF0aCIsImhhbmRsZXIiLCJwYXRoIiwiZWxlbWVudCIsInNzckRlY2lkZXIiLCJzc3JCb2R5VGVtcGxhdGUiLCJvcHRpb25hbCIsInNzclNoZWxsVGVtcGxhdGUiLCJyZXNvbHZlIiwidGltaW5nIiwiY2FsbGJhY2siLCJ1c2UiLCJwbHVnaW5zIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBLFNBQVFBLE9BQVIsUUFBc0IsY0FBdEI7QUFDQSxPQUFPQyxNQUFQLElBQWdCQyxXQUFoQixRQUFrQyxrQkFBbEM7QUFDQSxPQUFPQyxPQUFQLE1BQW9CLFlBQXBCO0FBQ0EsT0FBT0MsY0FBUCxNQUEyQiwyQkFBM0I7QUFDQSxTQUNFQyxXQURGLEVBRUVDLFlBRkYsRUFHRUMsZUFIRixFQUlFQyxvQkFKRixFQUtFQyxxQkFMRixRQU1PLFVBTlA7QUFPQSxPQUFPQyxTQUFQLE1BQXNCLGVBQXRCO0FBQ0EsT0FBT0MsaUJBQVAsTUFBOEIsNkJBQTlCO0FBQ0EsU0FBUUMsU0FBUixRQUF3Qix1QkFBeEI7QUFFQSxlQUFlLFlBQVk7QUFDekIsUUFBTUMsR0FBRyxHQUFHQyxPQUFPLENBQUMsS0FBRCxDQUFuQjs7QUFFQSxTQUFPLE1BQU1DLFNBQU4sU0FBd0JaLE9BQXhCLENBQWdDO0FBQ3JDYSxJQUFBQSxXQUFXLENBQUNDLEVBQUQsRUFBS0MsTUFBTCxFQUFhO0FBQ3RCLFlBQU1ELEVBQU4sRUFBVUMsTUFBVjtBQUNBLFdBQUtDLFNBQUwsR0FBaUIsSUFBSUMsR0FBSixFQUFqQjtBQUNBLFdBQUtDLElBQUwsR0FBWSxJQUFJUixHQUFKLEVBQVo7QUFDQSxXQUFLUSxJQUFMLENBQVVDLEtBQVYsR0FBa0IsSUFBbEI7QUFDQSxXQUFLQyxVQUFMLENBQWdCWixpQkFBaEI7QUFDQSxXQUFLWSxVQUFMLENBQWdCLENBQUNDLEdBQUQsRUFBTUMsSUFBTixLQUFlO0FBQzdCRCxRQUFBQSxHQUFHLENBQUNaLFNBQUQsQ0FBSCxHQUFpQixJQUFqQjtBQUNBLGVBQU9hLElBQUksRUFBWDtBQUNELE9BSEQ7QUFJQSxXQUFLQyxRQUFMLENBQWN4QixXQUFkLEVBQTJCRCxNQUEzQjtBQUNBLFdBQUtzQixVQUFMLENBQWdCLENBQUNDLEdBQUQsRUFBTUMsSUFBTixLQUFlO0FBQzdCLGFBQUssTUFBTSxDQUFDRSxZQUFELEVBQWVDLE9BQWYsQ0FBWCxJQUFzQyxLQUFLVCxTQUEzQyxFQUFzRDtBQUNwRCxjQUFJSyxHQUFHLENBQUNLLElBQUosS0FBYUYsWUFBakIsRUFBK0I7QUFDN0IsbUJBQU9DLE9BQU8sQ0FBQ0osR0FBRCxFQUFNQyxJQUFOLENBQWQ7QUFDRDtBQUNGOztBQUNELGVBQU9BLElBQUksRUFBWDtBQUNELE9BUEQ7QUFRQSxXQUFLRixVQUFMLENBQ0U7QUFDRU8sUUFBQUEsT0FBTyxFQUFFeEIsWUFEWDtBQUVFeUIsUUFBQUEsVUFBVSxFQUFFeEIsZUFGZDtBQUdFeUIsUUFBQUEsZUFBZSxFQUFFeEIsb0JBQW9CLENBQUN5QixRQUh4QztBQUlFQyxRQUFBQSxnQkFBZ0IsRUFBRXpCLHFCQUFxQixDQUFDd0I7QUFKMUMsT0FERixFQU9FdkIsU0FBUyxDQUFDLEtBQUtTLFNBQU4sQ0FQWDtBQVNEOztBQUNEZ0IsSUFBQUEsT0FBTyxHQUFHO0FBQ1IsV0FBS1osVUFBTCxDQUNFO0FBQ0VhLFFBQUFBLE1BQU0sRUFBRWxDLFdBRFY7QUFFRWdCLFFBQUFBLE1BQU0sRUFBRWIsV0FGVjtBQUdFMEIsUUFBQUEsVUFBVSxFQUFFeEI7QUFIZCxPQURGLEVBTUVILGNBQWMsQ0FBQyxJQUFELENBTmhCO0FBUUEsYUFBTyxNQUFNK0IsT0FBTixFQUFQO0FBQ0Q7O0FBQ0RFLElBQUFBLFFBQVEsR0FBRztBQUNULFdBQUtGLE9BQUw7O0FBQ0EsV0FBS2QsSUFBTCxDQUFVaUIsR0FBVixDQUFjdEMsT0FBTyxDQUFDLEtBQUt1QyxPQUFOLENBQXJCOztBQUNBLGFBQU8sS0FBS2xCLElBQUwsQ0FBVWdCLFFBQVYsRUFBUDtBQUNEOztBQTdDb0MsR0FBdkM7QUErQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQG5vZmxvd1xuICovXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cbmltcG9ydCB7Y29tcG9zZX0gZnJvbSAnLi9jb21wb3NlLmpzJztcbmltcG9ydCBUaW1pbmcsIHtUaW1pbmdUb2tlbn0gZnJvbSAnLi9wbHVnaW5zL3RpbWluZyc7XG5pbXBvcnQgQmFzZUFwcCBmcm9tICcuL2Jhc2UtYXBwJztcbmltcG9ydCBzZXJ2ZXJSZW5kZXJlciBmcm9tICcuL3BsdWdpbnMvc2VydmVyLXJlbmRlcmVyJztcbmltcG9ydCB7XG4gIFJlbmRlclRva2VuLFxuICBFbGVtZW50VG9rZW4sXG4gIFNTUkRlY2lkZXJUb2tlbixcbiAgU1NSQm9keVRlbXBsYXRlVG9rZW4sXG4gIFNTUlNoZWxsVGVtcGxhdGVUb2tlbixcbn0gZnJvbSAnLi90b2tlbnMnO1xuaW1wb3J0IHNzclBsdWdpbiBmcm9tICcuL3BsdWdpbnMvc3NyJztcbmltcG9ydCBjb250ZXh0TWlkZGxld2FyZSBmcm9tICcuL3BsdWdpbnMvc2VydmVyLWNvbnRleHQuanMnO1xuaW1wb3J0IHthcHBTeW1ib2x9IGZyb20gJy4vdXRpbHMvYXBwLXN5bWJvbC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgS29hID0gcmVxdWlyZSgna29hJyk7XG5cbiAgcmV0dXJuIGNsYXNzIFNlcnZlckFwcCBleHRlbmRzIEJhc2VBcHAge1xuICAgIGNvbnN0cnVjdG9yKGVsLCByZW5kZXIpIHtcbiAgICAgIHN1cGVyKGVsLCByZW5kZXIpO1xuICAgICAgdGhpcy5lbmRwb2ludHMgPSBuZXcgTWFwKCk7XG4gICAgICB0aGlzLl9hcHAgPSBuZXcgS29hKCk7XG4gICAgICB0aGlzLl9hcHAucHJveHkgPSB0cnVlO1xuICAgICAgdGhpcy5taWRkbGV3YXJlKGNvbnRleHRNaWRkbGV3YXJlKTtcbiAgICAgIHRoaXMubWlkZGxld2FyZSgoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgIGN0eFthcHBTeW1ib2xdID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5yZWdpc3RlcihUaW1pbmdUb2tlbiwgVGltaW5nKTtcbiAgICAgIHRoaXMubWlkZGxld2FyZSgoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgW2VuZHBvaW50UGF0aCwgaGFuZGxlcl0gb2YgdGhpcy5lbmRwb2ludHMpIHtcbiAgICAgICAgICBpZiAoY3R4LnBhdGggPT09IGVuZHBvaW50UGF0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIoY3R4LCBuZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5taWRkbGV3YXJlKFxuICAgICAgICB7XG4gICAgICAgICAgZWxlbWVudDogRWxlbWVudFRva2VuLFxuICAgICAgICAgIHNzckRlY2lkZXI6IFNTUkRlY2lkZXJUb2tlbixcbiAgICAgICAgICBzc3JCb2R5VGVtcGxhdGU6IFNTUkJvZHlUZW1wbGF0ZVRva2VuLm9wdGlvbmFsLFxuICAgICAgICAgIHNzclNoZWxsVGVtcGxhdGU6IFNTUlNoZWxsVGVtcGxhdGVUb2tlbi5vcHRpb25hbCxcbiAgICAgICAgfSxcbiAgICAgICAgc3NyUGx1Z2luKHRoaXMuZW5kcG9pbnRzKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmVzb2x2ZSgpIHtcbiAgICAgIHRoaXMubWlkZGxld2FyZShcbiAgICAgICAge1xuICAgICAgICAgIHRpbWluZzogVGltaW5nVG9rZW4sXG4gICAgICAgICAgcmVuZGVyOiBSZW5kZXJUb2tlbixcbiAgICAgICAgICBzc3JEZWNpZGVyOiBTU1JEZWNpZGVyVG9rZW4sXG4gICAgICAgIH0sXG4gICAgICAgIHNlcnZlclJlbmRlcmVyKHRoaXMpXG4gICAgICApO1xuICAgICAgcmV0dXJuIHN1cGVyLnJlc29sdmUoKTtcbiAgICB9XG4gICAgY2FsbGJhY2soKSB7XG4gICAgICB0aGlzLnJlc29sdmUoKTtcbiAgICAgIHRoaXMuX2FwcC51c2UoY29tcG9zZSh0aGlzLnBsdWdpbnMpKTtcbiAgICAgIHJldHVybiB0aGlzLl9hcHAuY2FsbGJhY2soKTtcbiAgICB9XG4gIH07XG59XG4iXX0=