"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _compose = require("./compose.js");

var _timing = _interopRequireWildcard(require("./plugins/timing"));

var _baseApp = _interopRequireDefault(require("./base-app"));

var _serverRenderer = _interopRequireDefault(require("./plugins/server-renderer"));

var _tokens = require("./tokens");

var _ssr = _interopRequireDefault(require("./plugins/ssr"));

var _serverContext = _interopRequireDefault(require("./plugins/server-context.js"));

var _appSymbol = require("./utils/app-symbol.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */
function _default() {
  const Koa = require('koa');

  return class ServerApp extends _baseApp.default {
    constructor(el, render) {
      super(el, render);
      this.endpoints = new Map();
      this._app = new Koa();
      this._app.proxy = true;
      this.middleware(_serverContext.default);
      this.middleware((ctx, next) => {
        ctx[_appSymbol.appSymbol] = this;
        return next();
      });
      this.register(_timing.TimingToken, _timing.default);
      this.middleware((ctx, next) => {
        for (const [endpointPath, handler] of this.endpoints) {
          if (ctx.path === endpointPath) {
            return handler(ctx, next);
          }
        }

        return next();
      });
      this.middleware({
        element: _tokens.ElementToken,
        ssrDecider: _tokens.SSRDeciderToken,
        ssrBodyTemplate: _tokens.SSRBodyTemplateToken.optional,
        ssrShellTemplate: _tokens.SSRShellTemplateToken.optional
      }, (0, _ssr.default)(this.endpoints));
    }

    resolve() {
      this.middleware({
        timing: _timing.TimingToken,
        render: _tokens.RenderToken,
        ssrDecider: _tokens.SSRDeciderToken
      }, (0, _serverRenderer.default)(this));
      return super.resolve();
    }

    callback() {
      this.resolve();

      this._app.use((0, _compose.compose)(this.plugins));

      return this._app.callback();
    }

  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9zZXJ2ZXItYXBwLmpzIl0sIm5hbWVzIjpbIktvYSIsInJlcXVpcmUiLCJTZXJ2ZXJBcHAiLCJCYXNlQXBwIiwiY29uc3RydWN0b3IiLCJlbCIsInJlbmRlciIsImVuZHBvaW50cyIsIk1hcCIsIl9hcHAiLCJwcm94eSIsIm1pZGRsZXdhcmUiLCJjb250ZXh0TWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJhcHBTeW1ib2wiLCJyZWdpc3RlciIsIlRpbWluZ1Rva2VuIiwiVGltaW5nIiwiZW5kcG9pbnRQYXRoIiwiaGFuZGxlciIsInBhdGgiLCJlbGVtZW50IiwiRWxlbWVudFRva2VuIiwic3NyRGVjaWRlciIsIlNTUkRlY2lkZXJUb2tlbiIsInNzckJvZHlUZW1wbGF0ZSIsIlNTUkJvZHlUZW1wbGF0ZVRva2VuIiwib3B0aW9uYWwiLCJzc3JTaGVsbFRlbXBsYXRlIiwiU1NSU2hlbGxUZW1wbGF0ZVRva2VuIiwicmVzb2x2ZSIsInRpbWluZyIsIlJlbmRlclRva2VuIiwiY2FsbGJhY2siLCJ1c2UiLCJwbHVnaW5zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBUUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBT0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBZ0JlLG9CQUFZO0FBQ3pCLFFBQU1BLEdBQUcsR0FBR0MsT0FBTyxDQUFDLEtBQUQsQ0FBbkI7O0FBRUEsU0FBTyxNQUFNQyxTQUFOLFNBQXdCQyxnQkFBeEIsQ0FBZ0M7QUFDckNDLElBQUFBLFdBQVcsQ0FBQ0MsRUFBRCxFQUFLQyxNQUFMLEVBQWE7QUFDdEIsWUFBTUQsRUFBTixFQUFVQyxNQUFWO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQixJQUFJQyxHQUFKLEVBQWpCO0FBQ0EsV0FBS0MsSUFBTCxHQUFZLElBQUlULEdBQUosRUFBWjtBQUNBLFdBQUtTLElBQUwsQ0FBVUMsS0FBVixHQUFrQixJQUFsQjtBQUNBLFdBQUtDLFVBQUwsQ0FBZ0JDLHNCQUFoQjtBQUNBLFdBQUtELFVBQUwsQ0FBZ0IsQ0FBQ0UsR0FBRCxFQUFNQyxJQUFOLEtBQWU7QUFDN0JELFFBQUFBLEdBQUcsQ0FBQ0Usb0JBQUQsQ0FBSCxHQUFpQixJQUFqQjtBQUNBLGVBQU9ELElBQUksRUFBWDtBQUNELE9BSEQ7QUFJQSxXQUFLRSxRQUFMLENBQWNDLG1CQUFkLEVBQTJCQyxlQUEzQjtBQUNBLFdBQUtQLFVBQUwsQ0FBZ0IsQ0FBQ0UsR0FBRCxFQUFNQyxJQUFOLEtBQWU7QUFDN0IsYUFBSyxNQUFNLENBQUNLLFlBQUQsRUFBZUMsT0FBZixDQUFYLElBQXNDLEtBQUtiLFNBQTNDLEVBQXNEO0FBQ3BELGNBQUlNLEdBQUcsQ0FBQ1EsSUFBSixLQUFhRixZQUFqQixFQUErQjtBQUM3QixtQkFBT0MsT0FBTyxDQUFDUCxHQUFELEVBQU1DLElBQU4sQ0FBZDtBQUNEO0FBQ0Y7O0FBQ0QsZUFBT0EsSUFBSSxFQUFYO0FBQ0QsT0FQRDtBQVFBLFdBQUtILFVBQUwsQ0FDRTtBQUNFVyxRQUFBQSxPQUFPLEVBQUVDLG9CQURYO0FBRUVDLFFBQUFBLFVBQVUsRUFBRUMsdUJBRmQ7QUFHRUMsUUFBQUEsZUFBZSxFQUFFQyw2QkFBcUJDLFFBSHhDO0FBSUVDLFFBQUFBLGdCQUFnQixFQUFFQyw4QkFBc0JGO0FBSjFDLE9BREYsRUFPRSxrQkFBVSxLQUFLckIsU0FBZixDQVBGO0FBU0Q7O0FBQ0R3QixJQUFBQSxPQUFPLEdBQUc7QUFDUixXQUFLcEIsVUFBTCxDQUNFO0FBQ0VxQixRQUFBQSxNQUFNLEVBQUVmLG1CQURWO0FBRUVYLFFBQUFBLE1BQU0sRUFBRTJCLG1CQUZWO0FBR0VULFFBQUFBLFVBQVUsRUFBRUM7QUFIZCxPQURGLEVBTUUsNkJBQWUsSUFBZixDQU5GO0FBUUEsYUFBTyxNQUFNTSxPQUFOLEVBQVA7QUFDRDs7QUFDREcsSUFBQUEsUUFBUSxHQUFHO0FBQ1QsV0FBS0gsT0FBTDs7QUFDQSxXQUFLdEIsSUFBTCxDQUFVMEIsR0FBVixDQUFjLHNCQUFRLEtBQUtDLE9BQWIsQ0FBZDs7QUFDQSxhQUFPLEtBQUszQixJQUFMLENBQVV5QixRQUFWLEVBQVA7QUFDRDs7QUE3Q29DLEdBQXZDO0FBK0NEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBub2Zsb3dcbiAqL1xuLyogZXNsaW50LWVudiBub2RlICovXG5pbXBvcnQge2NvbXBvc2V9IGZyb20gJy4vY29tcG9zZS5qcyc7XG5pbXBvcnQgVGltaW5nLCB7VGltaW5nVG9rZW59IGZyb20gJy4vcGx1Z2lucy90aW1pbmcnO1xuaW1wb3J0IEJhc2VBcHAgZnJvbSAnLi9iYXNlLWFwcCc7XG5pbXBvcnQgc2VydmVyUmVuZGVyZXIgZnJvbSAnLi9wbHVnaW5zL3NlcnZlci1yZW5kZXJlcic7XG5pbXBvcnQge1xuICBSZW5kZXJUb2tlbixcbiAgRWxlbWVudFRva2VuLFxuICBTU1JEZWNpZGVyVG9rZW4sXG4gIFNTUkJvZHlUZW1wbGF0ZVRva2VuLFxuICBTU1JTaGVsbFRlbXBsYXRlVG9rZW4sXG59IGZyb20gJy4vdG9rZW5zJztcbmltcG9ydCBzc3JQbHVnaW4gZnJvbSAnLi9wbHVnaW5zL3Nzcic7XG5pbXBvcnQgY29udGV4dE1pZGRsZXdhcmUgZnJvbSAnLi9wbHVnaW5zL3NlcnZlci1jb250ZXh0LmpzJztcbmltcG9ydCB7YXBwU3ltYm9sfSBmcm9tICcuL3V0aWxzL2FwcC1zeW1ib2wuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IEtvYSA9IHJlcXVpcmUoJ2tvYScpO1xuXG4gIHJldHVybiBjbGFzcyBTZXJ2ZXJBcHAgZXh0ZW5kcyBCYXNlQXBwIHtcbiAgICBjb25zdHJ1Y3RvcihlbCwgcmVuZGVyKSB7XG4gICAgICBzdXBlcihlbCwgcmVuZGVyKTtcbiAgICAgIHRoaXMuZW5kcG9pbnRzID0gbmV3IE1hcCgpO1xuICAgICAgdGhpcy5fYXBwID0gbmV3IEtvYSgpO1xuICAgICAgdGhpcy5fYXBwLnByb3h5ID0gdHJ1ZTtcbiAgICAgIHRoaXMubWlkZGxld2FyZShjb250ZXh0TWlkZGxld2FyZSk7XG4gICAgICB0aGlzLm1pZGRsZXdhcmUoKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICBjdHhbYXBwU3ltYm9sXSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMucmVnaXN0ZXIoVGltaW5nVG9rZW4sIFRpbWluZyk7XG4gICAgICB0aGlzLm1pZGRsZXdhcmUoKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IFtlbmRwb2ludFBhdGgsIGhhbmRsZXJdIG9mIHRoaXMuZW5kcG9pbnRzKSB7XG4gICAgICAgICAgaWYgKGN0eC5wYXRoID09PSBlbmRwb2ludFBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVyKGN0eCwgbmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMubWlkZGxld2FyZShcbiAgICAgICAge1xuICAgICAgICAgIGVsZW1lbnQ6IEVsZW1lbnRUb2tlbixcbiAgICAgICAgICBzc3JEZWNpZGVyOiBTU1JEZWNpZGVyVG9rZW4sXG4gICAgICAgICAgc3NyQm9keVRlbXBsYXRlOiBTU1JCb2R5VGVtcGxhdGVUb2tlbi5vcHRpb25hbCxcbiAgICAgICAgICBzc3JTaGVsbFRlbXBsYXRlOiBTU1JTaGVsbFRlbXBsYXRlVG9rZW4ub3B0aW9uYWwsXG4gICAgICAgIH0sXG4gICAgICAgIHNzclBsdWdpbih0aGlzLmVuZHBvaW50cylcbiAgICAgICk7XG4gICAgfVxuICAgIHJlc29sdmUoKSB7XG4gICAgICB0aGlzLm1pZGRsZXdhcmUoXG4gICAgICAgIHtcbiAgICAgICAgICB0aW1pbmc6IFRpbWluZ1Rva2VuLFxuICAgICAgICAgIHJlbmRlcjogUmVuZGVyVG9rZW4sXG4gICAgICAgICAgc3NyRGVjaWRlcjogU1NSRGVjaWRlclRva2VuLFxuICAgICAgICB9LFxuICAgICAgICBzZXJ2ZXJSZW5kZXJlcih0aGlzKVxuICAgICAgKTtcbiAgICAgIHJldHVybiBzdXBlci5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGNhbGxiYWNrKCkge1xuICAgICAgdGhpcy5yZXNvbHZlKCk7XG4gICAgICB0aGlzLl9hcHAudXNlKGNvbXBvc2UodGhpcy5wbHVnaW5zKSk7XG4gICAgICByZXR1cm4gdGhpcy5fYXBwLmNhbGxiYWNrKCk7XG4gICAgfVxuICB9O1xufVxuIl19