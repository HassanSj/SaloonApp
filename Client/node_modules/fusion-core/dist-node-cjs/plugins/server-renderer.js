"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createServerRenderPlugin;

var _now = require("../utils/now.js");

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
function createServerRenderPlugin(app) {
  return function serverRenderPlugin({
    render,
    timing,
    ssrDecider
  }) {
    return async function renderer(ctx, next) {
      app._setRef();

      app.renderSetupCtx = ctx; // Element wrappers should be added in *reverse* topological order so that
      // the resulting element tree is in topological order during renders.
      // For example, if plugin B depends on plugin A, the tree should be:
      // <AProvider>
      //   <BProvider>{root}</BProvider>
      // </APRovider>
      // In this case, B provider can depend on the context of A provider.

      for (var i = app.renderSetup.length - 1; i >= 0; i--) {
        const wrapper = app.renderSetup[i];
        const result = wrapper(ctx.element);

        if (result !== void 0) {
          ctx.element = result;
        }
      }

      app.renderSetupCtx = void 0;

      app._clearRef();

      const timer = timing.from(ctx);
      timer.downstream.resolve((0, _now.now)() - timer.start);
      let renderTime = null;

      if (ctx.element && !ctx.body && ctx.respond !== false) {
        app._setRef();

        app.renderCtx = ctx;
        const renderStart = (0, _now.now)();
        ctx.rendered = await render(ctx.element, ctx);
        renderTime = (0, _now.now)() - renderStart;
        app.renderCtx = void 0;

        app._clearRef();
      } // For non-streaming, run post prepare effects here
      // For streaming they are run on prepare boundary drop


      if (ssrDecider(ctx) === true) {
        app._setRef();

        app.postPrepareEffectCtx = ctx;

        for (const effect of ctx.postPrepareEffects) {
          effect();
        }

        app.postPrepareEffectCtx = void 0;

        app._clearRef();
      }

      timer.upstreamStart = (0, _now.now)();
      await next();

      if (ctx.element && typeof renderTime === 'number') {
        timer.render.resolve(renderTime);
      }
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wbHVnaW5zL3NlcnZlci1yZW5kZXJlci5qcyJdLCJuYW1lcyI6WyJjcmVhdGVTZXJ2ZXJSZW5kZXJQbHVnaW4iLCJhcHAiLCJzZXJ2ZXJSZW5kZXJQbHVnaW4iLCJyZW5kZXIiLCJ0aW1pbmciLCJzc3JEZWNpZGVyIiwicmVuZGVyZXIiLCJjdHgiLCJuZXh0IiwiX3NldFJlZiIsInJlbmRlclNldHVwQ3R4IiwiaSIsInJlbmRlclNldHVwIiwibGVuZ3RoIiwid3JhcHBlciIsInJlc3VsdCIsImVsZW1lbnQiLCJfY2xlYXJSZWYiLCJ0aW1lciIsImZyb20iLCJkb3duc3RyZWFtIiwicmVzb2x2ZSIsInN0YXJ0IiwicmVuZGVyVGltZSIsImJvZHkiLCJyZXNwb25kIiwicmVuZGVyQ3R4IiwicmVuZGVyU3RhcnQiLCJyZW5kZXJlZCIsInBvc3RQcmVwYXJlRWZmZWN0Q3R4IiwiZWZmZWN0IiwicG9zdFByZXBhcmVFZmZlY3RzIiwidXBzdHJlYW1TdGFydCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVFBOztBQVJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSWUsU0FBU0Esd0JBQVQsQ0FBa0NDLEdBQWxDLEVBQXVDO0FBQ3BELFNBQU8sU0FBU0Msa0JBQVQsQ0FBNEI7QUFBQ0MsSUFBQUEsTUFBRDtBQUFTQyxJQUFBQSxNQUFUO0FBQWlCQyxJQUFBQTtBQUFqQixHQUE1QixFQUEwRDtBQUMvRCxXQUFPLGVBQWVDLFFBQWYsQ0FBd0JDLEdBQXhCLEVBQTZCQyxJQUE3QixFQUFtQztBQUN4Q1AsTUFBQUEsR0FBRyxDQUFDUSxPQUFKOztBQUNBUixNQUFBQSxHQUFHLENBQUNTLGNBQUosR0FBcUJILEdBQXJCLENBRndDLENBR3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFdBQUssSUFBSUksQ0FBQyxHQUFHVixHQUFHLENBQUNXLFdBQUosQ0FBZ0JDLE1BQWhCLEdBQXlCLENBQXRDLEVBQXlDRixDQUFDLElBQUksQ0FBOUMsRUFBaURBLENBQUMsRUFBbEQsRUFBc0Q7QUFDcEQsY0FBTUcsT0FBTyxHQUFHYixHQUFHLENBQUNXLFdBQUosQ0FBZ0JELENBQWhCLENBQWhCO0FBQ0EsY0FBTUksTUFBTSxHQUFHRCxPQUFPLENBQUNQLEdBQUcsQ0FBQ1MsT0FBTCxDQUF0Qjs7QUFDQSxZQUFJRCxNQUFNLEtBQUssS0FBSyxDQUFwQixFQUF1QjtBQUNyQlIsVUFBQUEsR0FBRyxDQUFDUyxPQUFKLEdBQWNELE1BQWQ7QUFDRDtBQUNGOztBQUNEZCxNQUFBQSxHQUFHLENBQUNTLGNBQUosR0FBcUIsS0FBSyxDQUExQjs7QUFDQVQsTUFBQUEsR0FBRyxDQUFDZ0IsU0FBSjs7QUFFQSxZQUFNQyxLQUFLLEdBQUdkLE1BQU0sQ0FBQ2UsSUFBUCxDQUFZWixHQUFaLENBQWQ7QUFDQVcsTUFBQUEsS0FBSyxDQUFDRSxVQUFOLENBQWlCQyxPQUFqQixDQUF5QixrQkFBUUgsS0FBSyxDQUFDSSxLQUF2QztBQUVBLFVBQUlDLFVBQVUsR0FBRyxJQUFqQjs7QUFDQSxVQUFJaEIsR0FBRyxDQUFDUyxPQUFKLElBQWUsQ0FBQ1QsR0FBRyxDQUFDaUIsSUFBcEIsSUFBNEJqQixHQUFHLENBQUNrQixPQUFKLEtBQWdCLEtBQWhELEVBQXVEO0FBQ3JEeEIsUUFBQUEsR0FBRyxDQUFDUSxPQUFKOztBQUNBUixRQUFBQSxHQUFHLENBQUN5QixTQUFKLEdBQWdCbkIsR0FBaEI7QUFDQSxjQUFNb0IsV0FBVyxHQUFHLGVBQXBCO0FBQ0FwQixRQUFBQSxHQUFHLENBQUNxQixRQUFKLEdBQWUsTUFBTXpCLE1BQU0sQ0FBQ0ksR0FBRyxDQUFDUyxPQUFMLEVBQWNULEdBQWQsQ0FBM0I7QUFDQWdCLFFBQUFBLFVBQVUsR0FBRyxrQkFBUUksV0FBckI7QUFDQTFCLFFBQUFBLEdBQUcsQ0FBQ3lCLFNBQUosR0FBZ0IsS0FBSyxDQUFyQjs7QUFDQXpCLFFBQUFBLEdBQUcsQ0FBQ2dCLFNBQUo7QUFDRCxPQWhDdUMsQ0FrQ3hDO0FBQ0E7OztBQUNBLFVBQUlaLFVBQVUsQ0FBQ0UsR0FBRCxDQUFWLEtBQW9CLElBQXhCLEVBQThCO0FBQzVCTixRQUFBQSxHQUFHLENBQUNRLE9BQUo7O0FBQ0FSLFFBQUFBLEdBQUcsQ0FBQzRCLG9CQUFKLEdBQTJCdEIsR0FBM0I7O0FBQ0EsYUFBSyxNQUFNdUIsTUFBWCxJQUFxQnZCLEdBQUcsQ0FBQ3dCLGtCQUF6QixFQUE2QztBQUMzQ0QsVUFBQUEsTUFBTTtBQUNQOztBQUNEN0IsUUFBQUEsR0FBRyxDQUFDNEIsb0JBQUosR0FBMkIsS0FBSyxDQUFoQzs7QUFDQTVCLFFBQUFBLEdBQUcsQ0FBQ2dCLFNBQUo7QUFDRDs7QUFFREMsTUFBQUEsS0FBSyxDQUFDYyxhQUFOLEdBQXNCLGVBQXRCO0FBQ0EsWUFBTXhCLElBQUksRUFBVjs7QUFFQSxVQUFJRCxHQUFHLENBQUNTLE9BQUosSUFBZSxPQUFPTyxVQUFQLEtBQXNCLFFBQXpDLEVBQW1EO0FBQ2pETCxRQUFBQSxLQUFLLENBQUNmLE1BQU4sQ0FBYWtCLE9BQWIsQ0FBcUJFLFVBQXJCO0FBQ0Q7QUFDRixLQXBERDtBQXFERCxHQXRERDtBQXVERCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbm9mbG93XG4gKi9cblxuaW1wb3J0IHtub3d9IGZyb20gJy4uL3V0aWxzL25vdy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNlcnZlclJlbmRlclBsdWdpbihhcHApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlcnZlclJlbmRlclBsdWdpbih7cmVuZGVyLCB0aW1pbmcsIHNzckRlY2lkZXJ9KSB7XG4gICAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIHJlbmRlcmVyKGN0eCwgbmV4dCkge1xuICAgICAgYXBwLl9zZXRSZWYoKTtcbiAgICAgIGFwcC5yZW5kZXJTZXR1cEN0eCA9IGN0eDtcbiAgICAgIC8vIEVsZW1lbnQgd3JhcHBlcnMgc2hvdWxkIGJlIGFkZGVkIGluICpyZXZlcnNlKiB0b3BvbG9naWNhbCBvcmRlciBzbyB0aGF0XG4gICAgICAvLyB0aGUgcmVzdWx0aW5nIGVsZW1lbnQgdHJlZSBpcyBpbiB0b3BvbG9naWNhbCBvcmRlciBkdXJpbmcgcmVuZGVycy5cbiAgICAgIC8vIEZvciBleGFtcGxlLCBpZiBwbHVnaW4gQiBkZXBlbmRzIG9uIHBsdWdpbiBBLCB0aGUgdHJlZSBzaG91bGQgYmU6XG4gICAgICAvLyA8QVByb3ZpZGVyPlxuICAgICAgLy8gICA8QlByb3ZpZGVyPntyb290fTwvQlByb3ZpZGVyPlxuICAgICAgLy8gPC9BUFJvdmlkZXI+XG4gICAgICAvLyBJbiB0aGlzIGNhc2UsIEIgcHJvdmlkZXIgY2FuIGRlcGVuZCBvbiB0aGUgY29udGV4dCBvZiBBIHByb3ZpZGVyLlxuICAgICAgZm9yICh2YXIgaSA9IGFwcC5yZW5kZXJTZXR1cC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gYXBwLnJlbmRlclNldHVwW2ldO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB3cmFwcGVyKGN0eC5lbGVtZW50KTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgY3R4LmVsZW1lbnQgPSByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFwcC5yZW5kZXJTZXR1cEN0eCA9IHZvaWQgMDtcbiAgICAgIGFwcC5fY2xlYXJSZWYoKTtcblxuICAgICAgY29uc3QgdGltZXIgPSB0aW1pbmcuZnJvbShjdHgpO1xuICAgICAgdGltZXIuZG93bnN0cmVhbS5yZXNvbHZlKG5vdygpIC0gdGltZXIuc3RhcnQpO1xuXG4gICAgICBsZXQgcmVuZGVyVGltZSA9IG51bGw7XG4gICAgICBpZiAoY3R4LmVsZW1lbnQgJiYgIWN0eC5ib2R5ICYmIGN0eC5yZXNwb25kICE9PSBmYWxzZSkge1xuICAgICAgICBhcHAuX3NldFJlZigpO1xuICAgICAgICBhcHAucmVuZGVyQ3R4ID0gY3R4O1xuICAgICAgICBjb25zdCByZW5kZXJTdGFydCA9IG5vdygpO1xuICAgICAgICBjdHgucmVuZGVyZWQgPSBhd2FpdCByZW5kZXIoY3R4LmVsZW1lbnQsIGN0eCk7XG4gICAgICAgIHJlbmRlclRpbWUgPSBub3coKSAtIHJlbmRlclN0YXJ0O1xuICAgICAgICBhcHAucmVuZGVyQ3R4ID0gdm9pZCAwO1xuICAgICAgICBhcHAuX2NsZWFyUmVmKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZvciBub24tc3RyZWFtaW5nLCBydW4gcG9zdCBwcmVwYXJlIGVmZmVjdHMgaGVyZVxuICAgICAgLy8gRm9yIHN0cmVhbWluZyB0aGV5IGFyZSBydW4gb24gcHJlcGFyZSBib3VuZGFyeSBkcm9wXG4gICAgICBpZiAoc3NyRGVjaWRlcihjdHgpID09PSB0cnVlKSB7XG4gICAgICAgIGFwcC5fc2V0UmVmKCk7XG4gICAgICAgIGFwcC5wb3N0UHJlcGFyZUVmZmVjdEN0eCA9IGN0eDtcbiAgICAgICAgZm9yIChjb25zdCBlZmZlY3Qgb2YgY3R4LnBvc3RQcmVwYXJlRWZmZWN0cykge1xuICAgICAgICAgIGVmZmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIGFwcC5wb3N0UHJlcGFyZUVmZmVjdEN0eCA9IHZvaWQgMDtcbiAgICAgICAgYXBwLl9jbGVhclJlZigpO1xuICAgICAgfVxuXG4gICAgICB0aW1lci51cHN0cmVhbVN0YXJ0ID0gbm93KCk7XG4gICAgICBhd2FpdCBuZXh0KCk7XG5cbiAgICAgIGlmIChjdHguZWxlbWVudCAmJiB0eXBlb2YgcmVuZGVyVGltZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdGltZXIucmVuZGVyLnJlc29sdmUocmVuZGVyVGltZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==