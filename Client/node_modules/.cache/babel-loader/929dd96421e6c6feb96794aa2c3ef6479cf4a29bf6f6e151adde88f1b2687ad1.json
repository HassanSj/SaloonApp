{"ast":null,"code":"import globalState from '../globalState.js';\nimport privateMethods from '../privateMethods.js';\nimport privateProps from '../privateProps.js';\n\n/**\n * Dispose the current SweetAlert2 instance\n */\nexport function _destroy() {\n  const domCache = privateProps.domCache.get(this);\n  const innerParams = privateProps.innerParams.get(this);\n  if (!innerParams) {\n    disposeWeakMaps(this); // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335\n    return; // This instance has already been destroyed\n  }\n\n  // Check if there is another Swal closing\n  if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n    globalState.swalCloseEventFinishedCallback();\n    delete globalState.swalCloseEventFinishedCallback;\n  }\n  if (typeof innerParams.didDestroy === 'function') {\n    innerParams.didDestroy();\n  }\n  disposeSwal(this);\n}\n\n/**\n * @param {SweetAlert2} instance\n */\nconst disposeSwal = instance => {\n  disposeWeakMaps(instance);\n  // Unset this.params so GC will dispose it (#1569)\n  // @ts-ignore\n  delete instance.params;\n  // Unset globalState props so GC will dispose globalState (#1569)\n  delete globalState.keydownHandler;\n  delete globalState.keydownTarget;\n  // Unset currentInstance\n  delete globalState.currentInstance;\n};\n\n/**\n * @param {SweetAlert2} instance\n */\nconst disposeWeakMaps = instance => {\n  // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335\n  // @ts-ignore\n  if (instance.isAwaitingPromise()) {\n    unsetWeakMaps(privateProps, instance);\n    privateProps.awaitingPromise.set(instance, true);\n  } else {\n    unsetWeakMaps(privateMethods, instance);\n    unsetWeakMaps(privateProps, instance);\n  }\n};\n\n/**\n * @param {object} obj\n * @param {SweetAlert2} instance\n */\nconst unsetWeakMaps = (obj, instance) => {\n  for (const i in obj) {\n    obj[i].delete(instance);\n  }\n};","map":{"version":3,"names":["globalState","privateMethods","privateProps","_destroy","domCache","get","innerParams","disposeWeakMaps","popup","swalCloseEventFinishedCallback","didDestroy","disposeSwal","instance","params","keydownHandler","keydownTarget","currentInstance","isAwaitingPromise","unsetWeakMaps","awaitingPromise","set","obj","i","delete"],"sources":["D:/Documents/ProgramminStudio/Client/barbieme/node_modules/sweetalert2/src/instanceMethods/_destroy.js"],"sourcesContent":["import globalState from '../globalState.js'\nimport privateMethods from '../privateMethods.js'\nimport privateProps from '../privateProps.js'\n\n/**\n * Dispose the current SweetAlert2 instance\n */\nexport function _destroy() {\n  const domCache = privateProps.domCache.get(this)\n  const innerParams = privateProps.innerParams.get(this)\n\n  if (!innerParams) {\n    disposeWeakMaps(this) // The WeakMaps might have been partly destroyed, we must recall it to dispose any remaining WeakMaps #2335\n    return // This instance has already been destroyed\n  }\n\n  // Check if there is another Swal closing\n  if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n    globalState.swalCloseEventFinishedCallback()\n    delete globalState.swalCloseEventFinishedCallback\n  }\n\n  if (typeof innerParams.didDestroy === 'function') {\n    innerParams.didDestroy()\n  }\n  disposeSwal(this)\n}\n\n/**\n * @param {SweetAlert2} instance\n */\nconst disposeSwal = (instance) => {\n  disposeWeakMaps(instance)\n  // Unset this.params so GC will dispose it (#1569)\n  // @ts-ignore\n  delete instance.params\n  // Unset globalState props so GC will dispose globalState (#1569)\n  delete globalState.keydownHandler\n  delete globalState.keydownTarget\n  // Unset currentInstance\n  delete globalState.currentInstance\n}\n\n/**\n * @param {SweetAlert2} instance\n */\nconst disposeWeakMaps = (instance) => {\n  // If the current instance is awaiting a promise result, we keep the privateMethods to call them once the promise result is retrieved #2335\n  // @ts-ignore\n  if (instance.isAwaitingPromise()) {\n    unsetWeakMaps(privateProps, instance)\n    privateProps.awaitingPromise.set(instance, true)\n  } else {\n    unsetWeakMaps(privateMethods, instance)\n    unsetWeakMaps(privateProps, instance)\n  }\n}\n\n/**\n * @param {object} obj\n * @param {SweetAlert2} instance\n */\nconst unsetWeakMaps = (obj, instance) => {\n  for (const i in obj) {\n    obj[i].delete(instance)\n  }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,cAAc,MAAM,sBAAsB;AACjD,OAAOC,YAAY,MAAM,oBAAoB;;AAE7C;AACA;AACA;AACA,OAAO,SAASC,QAAQ,GAAG;EACzB,MAAMC,QAAQ,GAAGF,YAAY,CAACE,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;EAChD,MAAMC,WAAW,GAAGJ,YAAY,CAACI,WAAW,CAACD,GAAG,CAAC,IAAI,CAAC;EAEtD,IAAI,CAACC,WAAW,EAAE;IAChBC,eAAe,CAAC,IAAI,CAAC,EAAC;IACtB,OAAM,CAAC;EACT;;EAEA;EACA,IAAIH,QAAQ,CAACI,KAAK,IAAIR,WAAW,CAACS,8BAA8B,EAAE;IAChET,WAAW,CAACS,8BAA8B,EAAE;IAC5C,OAAOT,WAAW,CAACS,8BAA8B;EACnD;EAEA,IAAI,OAAOH,WAAW,CAACI,UAAU,KAAK,UAAU,EAAE;IAChDJ,WAAW,CAACI,UAAU,EAAE;EAC1B;EACAC,WAAW,CAAC,IAAI,CAAC;AACnB;;AAEA;AACA;AACA;AACA,MAAMA,WAAW,GAAIC,QAAQ,IAAK;EAChCL,eAAe,CAACK,QAAQ,CAAC;EACzB;EACA;EACA,OAAOA,QAAQ,CAACC,MAAM;EACtB;EACA,OAAOb,WAAW,CAACc,cAAc;EACjC,OAAOd,WAAW,CAACe,aAAa;EAChC;EACA,OAAOf,WAAW,CAACgB,eAAe;AACpC,CAAC;;AAED;AACA;AACA;AACA,MAAMT,eAAe,GAAIK,QAAQ,IAAK;EACpC;EACA;EACA,IAAIA,QAAQ,CAACK,iBAAiB,EAAE,EAAE;IAChCC,aAAa,CAAChB,YAAY,EAAEU,QAAQ,CAAC;IACrCV,YAAY,CAACiB,eAAe,CAACC,GAAG,CAACR,QAAQ,EAAE,IAAI,CAAC;EAClD,CAAC,MAAM;IACLM,aAAa,CAACjB,cAAc,EAAEW,QAAQ,CAAC;IACvCM,aAAa,CAAChB,YAAY,EAAEU,QAAQ,CAAC;EACvC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMM,aAAa,GAAG,CAACG,GAAG,EAAET,QAAQ,KAAK;EACvC,KAAK,MAAMU,CAAC,IAAID,GAAG,EAAE;IACnBA,GAAG,CAACC,CAAC,CAAC,CAACC,MAAM,CAACX,QAAQ,CAAC;EACzB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}