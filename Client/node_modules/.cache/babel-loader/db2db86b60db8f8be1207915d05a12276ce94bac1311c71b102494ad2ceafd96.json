{"ast":null,"code":"import globalState from '../globalState.js';\nimport { animateTimerProgressBar, stopTimerProgressBar } from '../utils/dom/domUtils.js';\n\n/**\n * If `timer` parameter is set, returns number of milliseconds of timer remained.\n * Otherwise, returns undefined.\n *\n * @returns {number | undefined}\n */\nexport const getTimerLeft = () => {\n  return globalState.timeout && globalState.timeout.getTimerLeft();\n};\n\n/**\n * Stop timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n *\n * @returns {number | undefined}\n */\nexport const stopTimer = () => {\n  if (globalState.timeout) {\n    stopTimerProgressBar();\n    return globalState.timeout.stop();\n  }\n};\n\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n *\n * @returns {number | undefined}\n */\nexport const resumeTimer = () => {\n  if (globalState.timeout) {\n    const remaining = globalState.timeout.start();\n    animateTimerProgressBar(remaining);\n    return remaining;\n  }\n};\n\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n *\n * @returns {number | undefined}\n */\nexport const toggleTimer = () => {\n  const timer = globalState.timeout;\n  return timer && (timer.running ? stopTimer() : resumeTimer());\n};\n\n/**\n * Increase timer. Returns number of milliseconds of an updated timer.\n * If `timer` parameter isn't set, returns undefined.\n *\n * @param {number} n\n * @returns {number | undefined}\n */\nexport const increaseTimer = n => {\n  if (globalState.timeout) {\n    const remaining = globalState.timeout.increase(n);\n    animateTimerProgressBar(remaining, true);\n    return remaining;\n  }\n};\n\n/**\n * Check if timer is running. Returns true if timer is running\n * or false if timer is paused or stopped.\n * If `timer` parameter isn't set, returns undefined\n *\n * @returns {boolean}\n */\nexport const isTimerRunning = () => {\n  return globalState.timeout && globalState.timeout.isRunning();\n};","map":{"version":3,"names":["globalState","animateTimerProgressBar","stopTimerProgressBar","getTimerLeft","timeout","stopTimer","stop","resumeTimer","remaining","start","toggleTimer","timer","running","increaseTimer","n","increase","isTimerRunning","isRunning"],"sources":["D:/Documents/ProgramminStudio/Client/barbieme/node_modules/sweetalert2/src/staticMethods/timer.js"],"sourcesContent":["import globalState from '../globalState.js'\nimport { animateTimerProgressBar, stopTimerProgressBar } from '../utils/dom/domUtils.js'\n\n/**\n * If `timer` parameter is set, returns number of milliseconds of timer remained.\n * Otherwise, returns undefined.\n *\n * @returns {number | undefined}\n */\nexport const getTimerLeft = () => {\n  return globalState.timeout && globalState.timeout.getTimerLeft()\n}\n\n/**\n * Stop timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n *\n * @returns {number | undefined}\n */\nexport const stopTimer = () => {\n  if (globalState.timeout) {\n    stopTimerProgressBar()\n    return globalState.timeout.stop()\n  }\n}\n\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n *\n * @returns {number | undefined}\n */\nexport const resumeTimer = () => {\n  if (globalState.timeout) {\n    const remaining = globalState.timeout.start()\n    animateTimerProgressBar(remaining)\n    return remaining\n  }\n}\n\n/**\n * Resume timer. Returns number of milliseconds of timer remained.\n * If `timer` parameter isn't set, returns undefined.\n *\n * @returns {number | undefined}\n */\nexport const toggleTimer = () => {\n  const timer = globalState.timeout\n  return timer && (timer.running ? stopTimer() : resumeTimer())\n}\n\n/**\n * Increase timer. Returns number of milliseconds of an updated timer.\n * If `timer` parameter isn't set, returns undefined.\n *\n * @param {number} n\n * @returns {number | undefined}\n */\nexport const increaseTimer = (n) => {\n  if (globalState.timeout) {\n    const remaining = globalState.timeout.increase(n)\n    animateTimerProgressBar(remaining, true)\n    return remaining\n  }\n}\n\n/**\n * Check if timer is running. Returns true if timer is running\n * or false if timer is paused or stopped.\n * If `timer` parameter isn't set, returns undefined\n *\n * @returns {boolean}\n */\nexport const isTimerRunning = () => {\n  return globalState.timeout && globalState.timeout.isRunning()\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,mBAAmB;AAC3C,SAASC,uBAAuB,EAAEC,oBAAoB,QAAQ,0BAA0B;;AAExF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM;EAChC,OAAOH,WAAW,CAACI,OAAO,IAAIJ,WAAW,CAACI,OAAO,CAACD,YAAY,EAAE;AAClE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,SAAS,GAAG,MAAM;EAC7B,IAAIL,WAAW,CAACI,OAAO,EAAE;IACvBF,oBAAoB,EAAE;IACtB,OAAOF,WAAW,CAACI,OAAO,CAACE,IAAI,EAAE;EACnC;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM;EAC/B,IAAIP,WAAW,CAACI,OAAO,EAAE;IACvB,MAAMI,SAAS,GAAGR,WAAW,CAACI,OAAO,CAACK,KAAK,EAAE;IAC7CR,uBAAuB,CAACO,SAAS,CAAC;IAClC,OAAOA,SAAS;EAClB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,WAAW,GAAG,MAAM;EAC/B,MAAMC,KAAK,GAAGX,WAAW,CAACI,OAAO;EACjC,OAAOO,KAAK,KAAKA,KAAK,CAACC,OAAO,GAAGP,SAAS,EAAE,GAAGE,WAAW,EAAE,CAAC;AAC/D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,aAAa,GAAIC,CAAC,IAAK;EAClC,IAAId,WAAW,CAACI,OAAO,EAAE;IACvB,MAAMI,SAAS,GAAGR,WAAW,CAACI,OAAO,CAACW,QAAQ,CAACD,CAAC,CAAC;IACjDb,uBAAuB,CAACO,SAAS,EAAE,IAAI,CAAC;IACxC,OAAOA,SAAS;EAClB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,cAAc,GAAG,MAAM;EAClC,OAAOhB,WAAW,CAACI,OAAO,IAAIJ,WAAW,CAACI,OAAO,CAACa,SAAS,EAAE;AAC/D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}